{"version":3,"sources":["components/SummaryTable.js","helpers/urls.js","helpers/lang.js","components/GovDropDownComp.js","components/Datecomp.js","components/Mapcomp.js","components/Piechartcomp.js","components/Urbanselectioncomp.js","components/Navcomp.js","components/Resourcescomp.jsx","components/OffCanvascomp.js","App.js","reportWebVitals.js","index.js"],"names":["Table","urls","langs","words","OffCanvasHeader","ar","en","CityDropDownTitle","GovDropDownTitle","DateDropDownTitle","LangDropDownTitle","ResourcesLegend","metrics","blue","green","yellow","magenta","purple","OffCanvasButton","SignInButton","DashboardButton","GovDropDownComp","lang","govs","fetchSelection","Dropdown","Toggle","variant","id","Menu","style","overflowY","maxHeight","Item","href","map","gov","onClick","replace","Datecomp","dates","date","LONGITUDE_RANGE","LATITUDE_RANGE","raw_view_state","longitude","latitude","zoom","pitch","bearing","transitionDuration","transitionInterpolator","FlyToInterpolator","minZoom","maxZoom","MapComponent","memo","data","toggleOffCanvasFunc","Country","useState","hoverInfo","setHoverInfo","view_state","set_view_state","polygon_data","set_polygon_data","hoveredObject","setHoveredObject","clickedObject","setClickedObject","useEffect","index","newData","undefined","lineWeight","color","newView","Object","assign","country","coordinate","PolygonLayer","elevationScale","extruded","filled","getLineColor","getLineWidth","d","getPolygon","contour","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthMinPixels","stroked","wireframe","pickable","viewState","onViewStateChange","e","controller","Math","min","max","getLineWeight","getFillColor","onHover","mapboxApiAccessToken","display","float","margin","padding","position","justifyContent","width","Button","Piechartcomp","resources","labels","setLabels","aqua","agriculture_land","road","series","setSeries","options","console","log","categories","type","chartOptions","Urbanselectioncomp","Navcomp","Navbar","collapseOnSelect","expand","bg","Container","Brand","Collapse","Nav","className","Link","eventKey","formatNumber","x","toString","Resourcescard","title","value","Alert","height","textAlign","Resourcescomp","Row","Col","LangDropdown","setStateFunc","OffCanvascomp","setLangStateFunc","resourcesTitle","imgpath","showCanvas","setShow","imgURI","setImgURI","Offcanvas","show","onHide","placement","scroll","backdrop","backgroundColor","Header","paddingTop","paddingBottom","Title","Body","Figure","Image","src","App","setLang","setDates","setGovs","trees","unknown","setResources","setLoading","mapdata","setmapData","setResourcesTitle","countryName","seetCountryName","setShowCanvas","selection","a","fetch","then","res","json","resource","fetchGovs","keys","fetchDates","temp","push","fetchAllAggregatedResources","response","coming_data","i","name","getCountries","s","md","Mapcomp","setLoadingFunc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","integrity","crossorigin","document","getElementById"],"mappings":"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","file":"static/js/main.6fbcb5d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Table.css\";\r\nfunction Table({ govs }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <tr>\r\n        <th>City</th>\r\n        <th>Agriculture</th>\r\n        <th>Aqua</th>\r\n        <th>Sand</th>\r\n        <th>Urban</th>\r\n        <th>Roads</th>\r\n        <th>No data</th>\r\n      </tr>\r\n\r\n      {govs.map(({ gov, agri }) => (\r\n        <tr>\r\n          <td>{gov}</td>\r\n          <td>\r\n            <strong>12%</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","const url = \"http://localhost:3001/\";\r\nexport const urls = {\r\n  home: url,\r\n  server: \"http://127.0.0.1:5000\",\r\n};\r\n","const langs = [\"ar\", \"en\"];\r\nconst words = {\r\n  OffCanvasHeader: {\r\n    ar: \"مصر\",\r\n    en: \"Egypt\",\r\n  },\r\n  CityDropDownTitle: {\r\n    ar: \"المدينة\",\r\n    en: \"City\",\r\n  },\r\n  GovDropDownTitle: {\r\n    ar: \"المحافظة\",\r\n    en: \"Governorate\",\r\n  },\r\n  DateDropDownTitle: {\r\n    ar: \"التاريخ\",\r\n    en: \"Date\",\r\n  },\r\n  LangDropDownTitle: {\r\n    ar: \"اللغة\",\r\n    en: \"Language\",\r\n  },\r\n  ResourcesLegend: {\r\n    metrics: {\r\n      ar: \"كم\",\r\n      en: \"km\",\r\n    },\r\n    blue: {\r\n      ar: \"المياة\",\r\n      en: \"Aqua\",\r\n    },\r\n    green: {\r\n      ar: \"الزراعة\",\r\n      en: \"Agriculture\",\r\n    },\r\n    yellow: {\r\n      ar: \"الصحراء\",\r\n      en: \"Sand/Rocks\",\r\n    },\r\n    magenta: {\r\n      ar: \"العمران\",\r\n      en: \"Urban\",\r\n    },\r\n    purple: {\r\n      ar: \"الطرق\",\r\n      en: \"Roads\",\r\n    },\r\n  },\r\n  OffCanvasButton: {\r\n    ar: \"اتصل بنا\",\r\n    en: \"Contact Us\",\r\n  },\r\n  SignInButton: {\r\n    ar: \"تسجيل الدخول\",\r\n    en: \"Login\",\r\n  },\r\n  DashboardButton: {\r\n    ar: \"لوحة القيادة\",\r\n    en: \"Dashboard\",\r\n  },\r\n};\r\n\r\nexport { langs, words };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { words } from \"../helpers/lang\";\r\nimport { urls } from \"../helpers/urls\";\r\n\r\nfunction GovDropDownComp({ lang, govs, fetchSelection }) {\r\n  // add the real\r\n\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n        {words.GovDropDownTitle[lang]}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu style={{ overflowY: \"scroll\", maxHeight: \"300px\" }}>\r\n        <Dropdown.Item href={\"/\"}>All Governorates</Dropdown.Item>\r\n        {govs.map((gov) => {\r\n          return (\r\n            <Dropdown.Item\r\n              onClick={() => {\r\n                fetchSelection(gov);\r\n              }}\r\n            >\r\n              {gov.replace(/-/g, \" \")}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default GovDropDownComp;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { words } from \"../helpers/lang\";\r\nimport { urls } from \"../helpers/urls\";\r\n\r\nfunction Datecomp({ lang, dates }) {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\r\n        {words.DateDropDownTitle[lang]}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu style={{ overflowY: \"scroll\", maxHeight: \"300px\" }}>\r\n        {dates.map((date) => {\r\n          return <Dropdown.Item href={\"#\"}>{date}</Dropdown.Item>;\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default Datecomp;\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport { PolygonLayer } from \"@deck.gl/layers\";\r\nimport { StaticMap, FlyToInterpolator } from \"react-map-gl\";\r\nimport { urls } from \"../helpers/urls\";\r\nimport { Container, Row, Col , Button } from \"react-bootstrap\";\r\nimport Govdropdowncomp from \"./GovDropDownComp\";\r\nimport Datecomp from \"./Datecomp\";\r\nimport { words } from \"../helpers/lang\";\r\nimport { govs, dates, cities } from \"../helpers/dummy\";\r\n\r\n// Viewport settings\r\n\r\nconst MAPBOX_ACCESS_TOKEN =\r\n  \"pk.eyJ1IjoiZG9uem9tYTA5IiwiYSI6ImNrcno0djVqNjAwMGEyd3BjanVuY2hqMGIifQ.sOkp8Uufulj_dbEEpHrh3w\";\r\n// Data to be used by the LineLayer\r\n\r\n// const transitionInterpolator = new Linear(['bearing']);\r\nconst LONGITUDE_RANGE = [22.8357675, 32.8357675];\r\nconst LATITUDE_RANGE = [22.5, 31.1956597];\r\n\r\nconst raw_view_state = {\r\n  longitude: 31.2,\r\n  latitude: 27.8025,\r\n  zoom: 6,\r\n  pitch: 10,\r\n  bearing: 0,\r\n  transitionDuration: 900,\r\n  transitionInterpolator: new FlyToInterpolator(20),\r\n  minZoom: 6,\r\n  maxZoom: 14,\r\n};\r\n\r\nconst myfunction = (data) => {\r\n  return [0, 0, 0];\r\n};\r\n\r\n// DeckGL react component\r\nconst MapComponent = memo(({ lang, dates, govs, data, fetchSelection , Country , toggleOffCanvasFunc}) => {\r\n  const [hoverInfo, setHoverInfo] = useState({});\r\n  const [view_state, set_view_state] = useState(raw_view_state);\r\n  const [polygon_data, set_polygon_data] = useState([{}]);\r\n  const [hoveredObject, setHoveredObject] = useState(-1);\r\n  const [clickedObject, setClickedObject] = useState({});\r\n\r\n  //   const rotateCamera = useCallback(() => {\r\n  //     set_view_state(viewState => ({\r\n  //       ...view_state,\r\n  //       bearing: viewState.bearing + 120,\r\n  //       transitionDuration: 1000,\r\n  //       transitionInterpolator,\r\n  //       onTransitionEnd: rotateCamera\r\n  //     }))\r\n  //   }, []);\r\n  const getIndex = (name) => {\r\n    for (const i in polygon_data) {\r\n      if (polygon_data[i][\"name\"] == name) {\r\n        return i;\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    set_polygon_data(data)\r\n  }, [data]); \r\n  // useEffect(() => {\r\n  //   if(Country != \"\"){\r\n  //     const index = getIndex(Country);\r\n  //     const newData = [...polygon_data];\r\n  //     if (newData[index] != undefined) {\r\n  //       console.log(newData[index])\r\n  //     }\r\n  //   }\r\n    \r\n  // }, [Country]); \r\n  useEffect(() => {\r\n    if (hoverInfo.index != -1) {\r\n      const index = hoverInfo.index;\r\n\r\n      const newData = [...polygon_data];\r\n      if (newData[index] != undefined) {\r\n        if (index != hoveredObject && hoveredObject != -1) {\r\n          newData[hoveredObject].lineWeight = 1;\r\n          newData[hoveredObject].color = [240, 240, 240, 20];\r\n        }\r\n        newData[index].lineWeight = 10;\r\n        newData[index].color = [100, 40, 40, 15];\r\n        setHoveredObject(index);\r\n        set_polygon_data(newData);\r\n      }\r\n    } else {\r\n      const newData = [...polygon_data];\r\n      if (newData[hoveredObject] != undefined) {\r\n        newData[hoveredObject].lineWeight = 1;\r\n        newData[hoveredObject].color = [240, 240, 240, 20];\r\n        set_polygon_data(newData);\r\n      }\r\n    }\r\n  }, [hoverInfo]);\r\n\r\n  useEffect(() => {\r\n    const index = clickedObject.index;\r\n    const newView = Object.assign({}, raw_view_state);\r\n    if (polygon_data[index] != undefined) {\r\n      let country = clickedObject['object']['name'];\r\n      fetchSelection(country);\r\n      if (view_state.zoom < 8) {\r\n        newView.longitude = clickedObject.coordinate[0];\r\n        newView.latitude = clickedObject.coordinate[1];\r\n        newView.zoom = 10.5;\r\n        set_view_state(newView);\r\n      }\r\n    }\r\n  }, [clickedObject]);\r\n  const layer = new PolygonLayer({\r\n    id: \"PolygonLayer\",\r\n    data: polygon_data,\r\n\r\n    /* props from PolygonLayer class */\r\n\r\n    elevationScale: 1,\r\n    extruded: false,\r\n    filled: true,\r\n    getLineColor: [200, 80, 80],\r\n    getLineWidth: (d) => 100,\r\n    getPolygon: (d) => d.contour,\r\n    // lineJointRounded: true,\r\n    // lineMiterLimit: 4,\r\n    lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\r\n    lineWidthMinPixels: 1,\r\n    // lineWidthScale: 1,\r\n    // lineWidthUnits: 'meters',\r\n    // material: true,\r\n    stroked: true,\r\n    wireframe: true,\r\n\r\n    /* props inherited from Layer class */\r\n\r\n    // autoHighlight: false,\r\n    // coordinateOrigin: [0, 0, 0],\r\n    // coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\r\n    // highlightColor: [0, 0, 128, 128],\r\n    // modelMatrix: null,\r\n    // opacity: 1,\r\n    pickable: true,\r\n    // visible: true,\r\n    // wrapLongitude: false,\r\n  });\r\n\r\n  const getLineWeight = (data) => {\r\n    return data.lineWeight;\r\n  };\r\n  return (\r\n    <DeckGL\r\n      viewState={view_state}\r\n      onViewStateChange={e => set_view_state(e.viewState)}\r\n      // onLoad={rotateCamera}\r\n      controller={true}\r\n      onViewStateChange={({ viewState }) => {\r\n        viewState.longitude = Math.min(\r\n          LONGITUDE_RANGE[1],\r\n          Math.max(LONGITUDE_RANGE[0], viewState.longitude)\r\n        );\r\n        viewState.latitude = Math.min(\r\n          LATITUDE_RANGE[1],\r\n          Math.max(LATITUDE_RANGE[0], viewState.latitude)\r\n        );\r\n        set_view_state(viewState);\r\n      }\r\n    }\r\n    >\r\n      <PolygonLayer\r\n        id=\"PolygonLayer\"\r\n        data={polygon_data}\r\n        elevationScale={1}\r\n        extruded={false}\r\n        getLineWidth={(d) => getLineWeight(d)}\r\n        filled={true}\r\n        getFillColor={(d) => d.color}\r\n        pickable={true}\r\n        getLineColor={(d) => myfunction(d)}\r\n        getPolygon={(d) => d.contour}\r\n        onHover={(d) => setHoverInfo(d)}\r\n        onClick={(d) => setClickedObject(d)}\r\n      ></PolygonLayer>\r\n      <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}></StaticMap>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          float: \"left\",\r\n          margin: \"1rem\",\r\n          padding: \"0\",\r\n          position: \"static\",\r\n          justifyContent: \"space-around\",\r\n          width: \"25%\",\r\n        }}\r\n      >\r\n        <Govdropdowncomp\r\n          lang={lang}\r\n          govs={govs}\r\n          fetchSelection={fetchSelection}\r\n        />\r\n        <Datecomp lang={lang} dates={dates} />\r\n        <Button onClick={() => toggleOffCanvasFunc()}>\r\n            {words.DashboardButton[lang]}\r\n          </Button>\r\n      </div>\r\n      \r\n    </DeckGL>\r\n  );\r\n});\r\n\r\nexport default MapComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { MediaQuery } from \"react-responsive\";\r\nimport { words } from \"../helpers/lang\";\r\n\r\nfunction Piechartcomp({ lang, resources }) {\r\n  let [labels, setLabels] = useState([\r\n    words.ResourcesLegend.blue[lang],\r\n    words.ResourcesLegend.green[lang],\r\n    words.ResourcesLegend.yellow[lang],\r\n    words.ResourcesLegend.magenta[lang],\r\n    words.ResourcesLegend.purple[lang],\r\n  ]);\r\n  const [series, setSeries] = useState([\r\n    resources.aqua,\r\n    resources.agriculture_land,\r\n    resources[\"sand-rocks\"],\r\n    resources[\"urban-land\"],\r\n    resources.road,\r\n  ]);\r\n\r\n  \r\n  useEffect(() => {\r\n    setLabels([\r\n      words.ResourcesLegend.blue[lang],\r\n      words.ResourcesLegend.green[lang],\r\n      words.ResourcesLegend.yellow[lang],\r\n      words.ResourcesLegend.magenta[lang],\r\n      words.ResourcesLegend.purple[lang],\r\n    ]);\r\n\r\n    setSeries([\r\n      resources.aqua,\r\n      resources.agriculture_land,\r\n      resources[\"sand-rocks\"],\r\n      resources[\"urban-land\"],\r\n      resources.road,\r\n    ]);\r\n  }, [lang, resources]);\r\n\r\n  const [options, setOptions] = useState({\r\n    series: series,\r\n    labels: labels,\r\n  });\r\n  console.log()\r\n  //responsivness\r\n  return (\r\n    <Chart\r\n      options={options}\r\n      series={series}\r\n      categories={labels}\r\n      type=\"donut\"\r\n      width=\"350\"\r\n      style={{ float: \"right\", display: \"flex\", color: \"white\" }}\r\n      chartOptions={{ labels: labels }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Piechartcomp;\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nfunction Urbanselectioncomp() {\r\n  const urbans = [\r\n    { type: \"Agriculture\", color: \"green \" },\r\n    { type: \"Aqua\", color: \"indigo\" },\r\n    { type: \"Sand\", color: \"#ffbf00\" },\r\n    { type: \"Urban\", color: \"#808080\" },\r\n    { type: \"Roads\", color: \"#404040\" },\r\n    { type: \"Unknown\", color: \"white\" },\r\n  ];\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant=\"Success\" id=\"dropdown-basic\">\r\n        Urban\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu style={{ overflowY: \"scroll\", maxHeight: \"300px\" }}>\r\n        {urbans.map(({ type, color }) => {\r\n          return (\r\n            <Dropdown.Item\r\n              style={{ justifyContent: \"space-between\" }}\r\n              href={\"#\"}\r\n            >\r\n              {type}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default Urbanselectioncomp;\r\n","import React, { useState } from \"react\";\r\nimport { Navbar, Container, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport { urls } from \"../helpers/urls.js\";\r\nimport { words } from \"../helpers/lang\";\r\n\r\nfunction Navcomp({ lang }) {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Container>\r\n        <Navbar.Brand href={urls.home}>\r\n          <strong>EG-Agri-Project</strong>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"me-auto\"></Nav>\r\n          <Nav>\r\n            {/* <Nav.Link href=\"#deets\">More deets</Nav.Link> */}\r\n            <Nav.Link eventKey={2} href=\"#memes\">\r\n              {words.SignInButton[lang]}\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Navcomp;\r\n","import React from \"react\";\r\nimport { Row, Col, Alert } from \"react-bootstrap\";\r\nimport { words } from \"../helpers/lang\";\r\nimport \"../css/Resourcescard.css\";\r\nfunction formatNumber(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nfunction Resourcescomp({ lang, resources }) {\r\n  return (\r\n    <div\r\n    >\r\n      <Row>\r\n        <Col>\r\n          <Resourcescard\r\n            variant=\"info\"\r\n            title={words.ResourcesLegend.blue[lang]}\r\n            value={formatNumber(resources.aqua)}\r\n            lang={lang}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Resourcescard\r\n            variant=\"success\"\r\n            title={words.ResourcesLegend.green[lang]}\r\n            value={formatNumber(resources.agriculture_land)}\r\n            lang={lang}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Resourcescard\r\n            variant=\"warning\"\r\n            title={words.ResourcesLegend.yellow[lang]}\r\n            value={formatNumber(resources[\"sand-rocks\"])}\r\n            lang={lang}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Resourcescard\r\n            variant=\"danger\"\r\n            title={words.ResourcesLegend.magenta[lang]}\r\n            value={formatNumber(resources[\"urban-land\"])}\r\n            lang={lang}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Resourcescard\r\n        variant=\"primary\"\r\n        title={words.ResourcesLegend.purple[lang]}\r\n        value={formatNumber(resources.road)}\r\n        lang={lang}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Resourcescard({ lang , title, value, variant }) {\r\n  return (\r\n    <Alert\r\n      variant={variant}\r\n      style={{\r\n        height: \"4.5rem\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\",\r\n        display: \"flex\",\r\n      }}\r\n    >\r\n      <p>\r\n        <strong>\r\n          {lang === \"en\" ? <div>{title}: </div> : <div>:{title} </div>}\r\n\r\n          {lang === \"en\" ? (\r\n            <span>\r\n              {value} {words.ResourcesLegend.metrics[lang]}\r\n              <sup>2</sup>\r\n            </span>\r\n          ) : (\r\n            <span>\r\n              <span>\r\n                {words.ResourcesLegend.metrics[lang]}\r\n                <sup>٢</sup>{\" \"}\r\n              </span>\r\n              {value}\r\n            </span>\r\n          )}\r\n        </strong>\r\n      </p>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nexport default Resourcescomp;\r\n","import React, { useState , useEffect } from \"react\";\r\nimport {\r\n  Offcanvas,\r\n  Button,\r\n  Dropdown,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Alert,\r\n  Figure,\r\n} from \"react-bootstrap\";\r\n// import logo from \"../helpers/files/abosombol.png\";\r\nimport Piechartcomp from \"./Piechartcomp\";\r\nimport Govdropdowncomp from \"./GovDropDownComp\";\r\nimport Datecomp from \"./Datecomp\";\r\nimport Urbandropdowncomp from \"./Urbanselectioncomp\";\r\nimport Navcomp from \"./Navcomp\";\r\nimport { words, langs } from \"../helpers/lang\";\r\nimport { govs, dates, cities } from \"../helpers/dummy\";\r\nimport Resourcescomp from \"./Resourcescomp\";\r\n\r\nconst LangDropdown = ({ setStateFunc, lang }) => {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Toggle\r\n        variant=\"Success\"\r\n        id=\"dropdown-basic\"\r\n        style={{ color: \"white\" }}\r\n      >\r\n        {lang}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {langs.map((lang) => {\r\n          return (\r\n            <Dropdown.Item onClick={() => setStateFunc(lang)} href={\"#\"}>\r\n              {lang}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nfunction OffCanvascomp({ lang, setLangStateFunc, resources, resourcesTitle ,imgpath, showCanvas}) {\r\n  const [show, setShow] = useState(true);\r\n  const [imgURI , setImgURI] = useState(imgpath)\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    setImgURI(imgpath)\r\n  }, [imgpath]); \r\n  return (\r\n    <>\r\n      {/* <Button variant=\"primary\" onClick={handleShow} className=\"me-2\"></Button> */}\r\n      <Offcanvas\r\n        show={showCanvas}\r\n        onHide={handleClose}\r\n        placement={\"end\"}\r\n        scroll={true}\r\n        backdrop={false}\r\n        style={{\r\n          backgroundColor: \"#6A7A7F\",\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        <Navcomp lang={lang} />\r\n        <Offcanvas.Header\r\n          /* closeButton */\r\n          style={{ paddingTop: \"0\", paddingBottom: \"2px\" }}\r\n        >\r\n          <Offcanvas.Title style={{ display: \"flex\", color: \"white\" }}>\r\n            <strong>{words.OffCanvasHeader[lang]}</strong>\r\n          </Offcanvas.Title>\r\n          <LangDropdown setStateFunc={setLangStateFunc} lang={lang} />\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body>\r\n          {/* ID: A1 */}\r\n          <Piechartcomp lang={lang} resources={resources} />\r\n          {/* <Image src=\"#\" rounded style={{ backgroundColor: \"black\" }} /> */}\r\n          {/* <Button variant=\"link\">Show Info</Button> */}\r\n          <div\r\n            style={{\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <h6>{resourcesTitle}</h6>\r\n            <Resourcescomp resources={resources} lang={lang} />\r\n          </div>\r\n          <Figure\r\n            style={{\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n\r\n            <Figure.Image width={\"100%\"}src={\"http://127.0.0.1:5000/\" + imgURI } />\r\n          </Figure>\r\n          {/* {console.log(\"\")} */}\r\n        </Offcanvas.Body>\r\n        {/* <div\r\n          className=\"d-grid gap-2\"\r\n          style={{ position: \"absolute\", bottom: \"10px\", marginLeft: \"1rem\" }}\r\n        >\r\n          <Button variant=\"light\" size=\"sm\">\r\n            {words.OffCanvasButton[lang]}\r\n          </Button>\r\n        </div> */}\r\n      </Offcanvas>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OffCanvascomp;\r\n// ID: A1\r\n// {/* <Row>\r\n//   <Col>\r\n//     {/* Gov Dropdown */}\r\n//     <Govdropdowncomp govs={govs} lang={lang} />\r\n//     {/* City Dropdown */}\r\n//   </Col>\r\n//   {/* <Col>\r\n//               <Citydropdowncomp cities={cities} lang={lang} />\r\n//             </Col> */}\r\n//   <Col>\r\n//     <Urbandropdowncomp />\r\n//   </Col>\r\n//   <Col>\r\n//     <Datecomp values={dates} lang={lang} />\r\n//   </Col>\r\n// </Row>; */}\r\n","import \"./css/App.css\";\nimport \"./css/Table.css\";\n/* import Navcomp from \"./components/Navcomp\"; */\n\nimport SummaryTable from \"./components/SummaryTable\";\nimport Mapcomp from \"./components/Mapcomp\";\n/* import { govs, dates, cities } from \"./helpers/dummy\"; */\nimport { Container, Row, Col, Dropdown } from \"react-bootstrap\";\nimport OffCanvascomp from \"./components/OffCanvascomp\";\nimport React, { useState, useEffect } from \"react\";\nimport Loadingcomponent from \"./components/Loadingcomponent\";\nimport { urls } from \"./helpers/urls\";\n\nfunction App() {\n  //@TODO language config\n  const [lang, setLang] = useState(\"en\"); //responsible for the language dropdown state\n  const [dates, setDates] = useState([]); // responsible for the Dates dropdown state\n  const [govs, setGovs] = useState([]); //responsible for the governorate drop down state\n  const [resources, setResources] = useState({\n    agriculture_land: 0,\n    aqua: 0,\n    road: 0,\n    \"sand-rocks\": 0,\n    trees: 0,\n    unknown: 0,\n    \"urban-land\": 0,\n  }); //responsible for the  resources cards state\n  const [loading, setLoading] = useState(true); //responsible for the loading state\n  const [error, setError] = useState(false); //responsibel for the error state\n  const [mapdata, setmapData] = useState([{}]);\n  const [resourcesTitle, setResourcesTitle] = useState(\"All Governorates\");\n  const [countryName , seetCountryName ] = useState(\"\")\n  const [imgURI , setImgURI] = useState(\"static/imgs/mash_abohomos.png\")\n  const [showCanvas, setShowCanvas] = useState(true); //switches the canvas on/off\n\n  ///----- Functions -----///\n  // fetches the selection of the governorate dropdown\n  function toggleOffCanvas() {\n    setShowCanvas(!showCanvas);\n  }\n  async function fetchGovSelection(selection) {\n    setLoading(true);\n    setResourcesTitle(selection);\n    seetCountryName(selection)\n    await fetch(urls.server + \"/resources/\" + selection)\n      .then((res) => res.json())\n      .then((data) => {\n        setResources(data.resource);\n        setLoading(false);\n        if(data.imgURI != undefined){\n          setImgURI(data.imgURI)\n        }else{\n          setImgURI(\"\")\n        }\n      });\n  }\n\n  ///----- UseEffects -----///\n  // Get all needed data for the startup\n  useEffect(() => {\n    //fetches the governorates data\n    const fetchGovs = async () => {\n      fetch(urls.server + \"/date/all\")\n        .then((res) => res.json())\n        .then((data) => {\n          setGovs(Object.keys(data));\n        });\n    };\n\n    //fetches the date data\n    const fetchDates = async () => {\n      fetch(urls.server + \"/date/all\")\n        .then((res) => res.json())\n        .then((data) => {\n          let temp = [];\n          for (const gov in data) {\n            temp.push(data[gov]);\n          }\n          setDates(temp);\n        });\n    };\n\n    //fetches aggregated resources for all governorates\n    const fetchAllAggregatedResources = async () => {\n      fetch(urls.server + \"/resources/all\")\n        .then((res) => res.json())\n        .then((data) => {\n          setResources(data);\n        });\n    };\n\n    // Actual calls\n    fetchGovs();\n    fetchDates();\n    fetchAllAggregatedResources();\n    setLoading(false);\n  }, []);\n\n  //fetches map data\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(urls.server + \"/governorate/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          const coming_data = [];\n          for (const i in data) {\n            if (data[i][\"type\"] == \"MultiPolygon\") {\n              continue;\n            }\n            coming_data.push({\n              contour: data[i][\"cord\"],\n              lineWeight: 1,\n              name: data[i][\"name\"],\n              type: data[i][\"type\"],\n              color: [240, 240, 240, 20],\n            });\n          }\n          console.log(coming_data)\n          return coming_data;\n        })\n        .then((data) => {\n          setmapData(data);\n          console.log(data);\n        });\n    };\n    getCountries();\n  }, []);\n\n  return (\n    <div>\n      <header>\n        {/* Navbar [drop down to select gov && dropdown to select region && dropdown to select date*/}\n        {/* <Navcomp style={{ position: \"absolute\" }} /> */}\n      </header>\n      <body>\n        {/* Grid */}\n\n        <div\n          style={{\n            margin: \"1rem 0\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          {/* <Container>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-evenly\",\n                float: \"left\",\n                margin: \"0.2rem 0\",\n              }}\n            >\n              <Datecomp values={dates} lang={lang} />\n\n              <Urbandropdowncomp />\n            </div>\n            </Container>*/}\n          {/* First Row  */}\n          <Row>\n            <Col s={12} md={7}>\n              <Mapcomp\n                toggleOffCanvasFunc = {toggleOffCanvas}\n                lang={lang}\n                dates={dates}\n                govs={govs}\n                fetchSelection={fetchGovSelection}\n                setLoadingFunc={setLoading}\n                setResourcesTitle={setResourcesTitle}\n                data={mapdata}\n                Country = {countryName}\n              />\n            </Col>\n            <Col s={12} md={5}>\n              <OffCanvascomp\n                showCanvas = {showCanvas}\n                imgpath = {imgURI}\n                setLangStateFunc={setLang}\n                lang={lang}\n                resources={resources}\n                setLoadingFunc={setLoading}\n                resourcesTitle={resourcesTitle}\n                \n              />\n            </Col>\n          </Row>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n      integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n      crossorigin=\"anonymous\"\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}