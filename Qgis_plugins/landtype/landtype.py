# -*- coding: utf-8 -*-
"""
/***************************************************************************
 fieldtype
                                 A QGIS plugin
 AIC land type classifier
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by aic
        email                : mohamed.rehan@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QFileDialog
from qgis.core import QgsProject, Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .landtype_dialog import fieldtypeDialog
import os.path
import os
import glob
import shutil
import requests

from .utils import sentinel_roi_generation
from .utils import read_merged_shape_file
from .utils import sen2_cropping
from . import predict
from .utils import merge_results_one_tile

class fieldtype:
    """QGIS Plugin Implementation."""
    def select_file_shape(self):
        self.shape_filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Shape file ","", '*.shp')
        self.dlg.lineEditShape.setText(self.shape_filename)

    def select_file_runScript(self):
        self.runScript_filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Run Script file ","", '*.py')
        self.dlg.lineEditRunScript.setText(self.runScript_filename)

    def select_file_configuration(self):
        self.configuration_filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select configuration file ","", '*.pkl')
        self.dlg.lineEditConfiguration.setText(self.configuration_filename)

    def select_folder_tiles(self):
        self.tiles_folder = QFileDialog.getExistingDirectory(
        self.dlg, "Select tiles folder ")
        self.dlg.lineEditTiles.setText(self.tiles_folder)


    def select_file_model(self):
        self.model_filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select model file ","", '*.pth')
        self.dlg.lineEditModel.setText(self.model_filename)

    def select_folder_output(self):
        self.output_folder = QFileDialog.getExistingDirectory(
        self.dlg, "Select output folder ")
        self.dlg.lineEditOutput.setText(self.output_folder)


    def select_folder_tmp(self):
        self.tmp_folder = QFileDialog.getExistingDirectory(
        self.dlg, "Select tmp folder ")
        self.dlg.lineEditTmp.setText(self.tmp_folder)



    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'fieldtype_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AIC Boundary Detection')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('fieldtype', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/landtype/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'AIC Field Boundary Detection'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Field Type Classifier'),
                action)
            self.iface.removeToolBarIcon(action)










    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = fieldtypeDialog()
            self.dlg.pushButtonTiles.clicked.connect(self.select_folder_tiles)
            self.dlg.pushButtonModel.clicked.connect(self.select_file_model)
            self.dlg.pushButtonOutput.clicked.connect(self.select_folder_output)
            self.dlg.pushButtonTmp.clicked.connect(self.select_folder_tmp)
            self.dlg.pushButtonConfiguration.clicked.connect(self.select_file_configuration)
            self.dlg.pushButtonRunScript.clicked.connect(self.select_file_runScript)
            self.dlg.pushButtonShape.clicked.connect(self.select_file_shape)
            #initial values
            self.runScript_filename = "/home/developer-5/Desktop/prediction_code/training_data/land_cover/src/run.py"
            self.configuration_filename = "/home/developer-5/Desktop/test_prediction/July_7th_4bands/args.pkl"
            self.model_filename = "/home/developer-5/Desktop/test_prediction/July_7th_4bands/agri_checkpoint_step_28800.pth"
            self.tiles_folder = "/home/developer-5/Desktop/test_prediction/tiles"
            self.shape_filename = "/home/developer-5/Desktop/test_prediction/shape/Pilot_Minia.shp"
            self.output_folder = "/home/developer-5/Desktop/test_prediction/output"
            self.tmp_folder = "/home/developer-5/Desktop/tmp"
            
            
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #dummy inputs
            print("starting")
            # script_path, script_name = os.path.split(self.runScript_filename)
            # cmd_string = "python " + script_name + " --config " + self.configuration_filename + " --checkpoint_file " + self.model_filename + " --bands_dir " + self.tiles_folder + " --shape_file_path " + self.shape_filename + " --results_path " + self.output_folder + " --temp_directory " + self.tmp_folder
            # requet post requesst with predict endpoint
            r = requests.post("http://127.0.0.1:5000/predict", data={"config": self.configuration_filename, "checkpoint_file": self.model_filename, "bands_dir": self.tiles_folder, "shape_file_path": self.shape_filename, "results_path": self.output_folder, "temp_directory": self.tmp_folder}) 
            print(r)
            #dump output file into database
            self.iface.messageBar().pushMessage(
              "Success "
              ,level=Qgis.Success, duration=3)
            print("completed !", flush=True)
            pass
